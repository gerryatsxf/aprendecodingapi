name: Docker Image CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:

  build:
    runs-on: self-hosted
    environment: dev  # This targets the 'dev' environment
    steps:
    - uses: actions/checkout@v4

    - name: Stop and remove all existing containers
      run: |
        # Stop and remove all related containers
        docker-compose down --remove-orphans || true
        docker stop aprendecoding_api aprendecoding_mongodb aprendecodingapi || true
        docker rm aprendecoding_api aprendecoding_mongodb aprendecodingapi || true
        
        # Clean up any containers using our ports
        docker ps --filter "publish=3002" -q | xargs -r docker stop || true
        docker ps -a --filter "publish=3002" -q | xargs -r docker rm || true
        docker ps --filter "publish=27017" -q | xargs -r docker stop || true
        docker ps -a --filter "publish=27017" -q | xargs -r docker rm || true
        
        # Clean up unused images to save space
        docker image prune -f || true

    - name: Build Docker images
      run: docker-compose build api

    - name: Deploy to production
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN: ${{ vars.JWT_EXPIRES_IN }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        STRIPE_PAYMENT_SUCCESS_WEBHOOK_SECRET_KEY: ${{ secrets.STRIPE_PAYMENT_SUCCESS_WEBHOOK_SECRET_KEY }}
        NYLAS_MAIN_ACCOUNT_EMAIL: ${{ vars.NYLAS_MAIN_ACCOUNT_EMAIL }}
        NYLAS_CLIENT_ID: ${{ secrets.NYLAS_CLIENT_ID }}
        NYLAS_CLIENT_SECRET: ${{ secrets.NYLAS_CLIENT_SECRET }}
        NYLAS_MAIN_ACCOUNT_ACCESS_TOKEN: ${{ secrets.NYLAS_MAIN_ACCOUNT_ACCESS_TOKEN }}
        CREATE_MEETING_URL: ${{ secrets.CREATE_MEETING_URL }}
        VONAGE_JWT_365_DAYS: ${{ secrets.VONAGE_JWT_365_DAYS }}
      run: |
        # Start MongoDB and API services
        docker-compose up -d mongodb api
        
        # Wait for services to be healthy
        echo "Waiting for services to start..."
        sleep 30
        
        # Check if containers are running
        docker-compose ps
        
        # Show logs for debugging
        echo "=== MongoDB Logs ==="
        docker-compose logs mongodb
        echo "=== API Logs ==="
        docker-compose logs api

    - name: Health check
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      run: |
        # Wait a bit more for the API to fully start
        sleep 10
        
        # Test if the API is responding
        curl -f http://localhost:3002 || exit 1
        echo "âœ… API is responding successfully!"
