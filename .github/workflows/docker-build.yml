name: Docker Image CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:

  build:
    runs-on: self-hosted
    environment: dev  # This targets the 'dev' environment
    steps:
    - uses: actions/checkout@v4

    - name: Stop and remove all existing containers
      run: |
        # Stop and remove all related containers
        docker stop aprendecoding_api aprendecoding_mongodb aprendecodingapi || true
        docker rm aprendecoding_api aprendecoding_mongodb aprendecodingapi || true
        
        # Clean up any containers using our ports
        docker ps --filter "publish=3002" -q | xargs -r docker stop || true
        docker ps -a --filter "publish=3002" -q | xargs -r docker rm || true
        docker ps --filter "publish=27017" -q | xargs -r docker stop || true
        docker ps -a --filter "publish=27017" -q | xargs -r docker rm || true
        
        # Remove existing network
        docker network rm aprendecoding_network || true
        
        # Clean up unused images to save space
        docker image prune -f || true

    - name: Create Docker network
      run: |
        # Create network for containers to communicate
        docker network create aprendecoding_network || true

    - name: Build Docker image
      run: docker build . --file Dockerfile --tag aprendecoding:latest

    - name: Deploy to production
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN: ${{ vars.JWT_EXPIRES_IN }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        STRIPE_PAYMENT_SUCCESS_WEBHOOK_SECRET_KEY: ${{ secrets.STRIPE_PAYMENT_SUCCESS_WEBHOOK_SECRET_KEY }}
        NYLAS_MAIN_ACCOUNT_EMAIL: ${{ vars.NYLAS_MAIN_ACCOUNT_EMAIL }}
        NYLAS_CLIENT_ID: ${{ secrets.NYLAS_CLIENT_ID }}
        NYLAS_CLIENT_SECRET: ${{ secrets.NYLAS_CLIENT_SECRET }}
        NYLAS_MAIN_ACCOUNT_ACCESS_TOKEN: ${{ secrets.NYLAS_MAIN_ACCOUNT_ACCESS_TOKEN }}
        CREATE_MEETING_URL: ${{ secrets.CREATE_MEETING_URL }}
        VONAGE_JWT_365_DAYS: ${{ secrets.VONAGE_JWT_365_DAYS }}
      run: |
        # Start MongoDB container first
        docker run -d --name aprendecoding_mongodb \
          --network aprendecoding_network \
          -p 27017:27017 \
          -e MONGO_INITDB_ROOT_USERNAME=admin_root \
          -e MONGO_INITDB_ROOT_PASSWORD=admin_root \
          -e MONGO_INITDB_DATABASE=aprendecoding \
          mongo:7.0
        
        # Wait for MongoDB to be ready
        echo "Waiting for MongoDB to start..."
        sleep 15
        
        # Start API container
        docker run -d --name aprendecoding_api \
          --network aprendecoding_network \
          -p 3002:3002 \
          -e DOCKER_ENV=true \
          -e NODE_ENV=production \
          -e PORT=3002 \
          -e MONGO_DB_ATLAS_CONNECTION_STRING="mongodb://admin_root:admin_root@aprendecoding_mongodb:27017/aprendecoding?authSource=admin" \
          -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          -e JWT_EXPIRES_IN="${{ vars.JWT_EXPIRES_IN }}" \
          -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
          -e STRIPE_PAYMENT_SUCCESS_WEBHOOK_SECRET_KEY="${{ secrets.STRIPE_PAYMENT_SUCCESS_WEBHOOK_SECRET_KEY }}" \
          -e NYLAS_MAIN_ACCOUNT_EMAIL="${{ vars.NYLAS_MAIN_ACCOUNT_EMAIL }}" \
          -e NYLAS_CLIENT_ID="${{ secrets.NYLAS_CLIENT_ID }}" \
          -e NYLAS_CLIENT_SECRET="${{ secrets.NYLAS_CLIENT_SECRET }}" \
          -e NYLAS_MAIN_ACCOUNT_ACCESS_TOKEN="${{ secrets.NYLAS_MAIN_ACCOUNT_ACCESS_TOKEN }}" \
          -e CREATE_MEETING_URL="${{ secrets.CREATE_MEETING_URL }}" \
          -e VONAGE_JWT_365_DAYS="${{ secrets.VONAGE_JWT_365_DAYS }}" \
          aprendecoding:latest
        
        # Wait for services to be healthy
        echo "Waiting for API to start..."
        sleep 30
        
        # Show running containers
        echo "=== Running Containers ==="
        docker ps
        
        # Show logs for debugging
        echo "=== MongoDB Logs ==="
        docker logs aprendecoding_mongodb --tail 20
        echo "=== API Logs ==="
        docker logs aprendecoding_api --tail 20

    - name: Health check
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      run: |
        # Wait a bit more for the API to fully start
        sleep 10
        
        # Check if container is running
        if docker ps | grep aprendecoding_api | grep -q "Up"; then
          echo "✅ API container is running!"
          
          # Check the health endpoint
          echo "Testing health endpoint..."
          if curl -f http://localhost:3002/health > /dev/null 2>&1; then
            echo "✅ Health endpoint is responding!"
            echo "🎉 Deployment successful! API is healthy and running."
            
            # Show the health response for verification
            echo "Health status:"
            curl -s http://localhost:3002/health | head -5
          else
            echo "❌ Health endpoint failed, trying root endpoint..."
            if curl -f http://localhost:3002 > /dev/null 2>&1; then
              echo "✅ Root endpoint is responding!"
              echo "🎉 Deployment successful! API is running."
            else
              echo "⚠️  Endpoints not responding, but checking port..."
              if timeout 10 bash -c 'until nc -z localhost 3002; do sleep 1; done'; then
                echo "✅ API port 3002 is accessible!"
                echo "🎉 Deployment successful! API is running (port accessible)."
              else
                echo "❌ API port 3002 is not accessible"
                echo "🔍 Checking API logs for errors..."
                docker logs aprendecoding_api --tail 50
                exit 1
              fi
            fi
          fi
        else
          echo "❌ API container is not running properly"
          docker ps -a | grep aprendecoding
          exit 1
        fi
